#make file for testing and evaluate coverage for libmerc with libmerc_driver

include ../Makefile_helper.mk

LIBMERC_FOLDER = ../src/libmerc/
LIBMERC_SO = $(LIBMERC_FOLDER)libmerc.so

UNIT_TESTS = catch2main.cc
UNIT_TESTS += libmerc_driver.cc

UNIT_TESTS_H = catch.hpp

# implicit rules for building object files from .cc files
%.o: %.cc
	$(CXX) $(CFLAGS) -c $<

# target to build all executables
#
all: libmerc_driver pdu_verifier

libmerc_driver: debug-libmerc $(UNIT_TESTS) $(LIBMERC_SO) Makefile.in $(UNIT_TESTS_H)
	$(CXX) $(CFLAGS) -I../src/libmerc $(UNIT_TESTS) -pthread -fsanitize=address -lasan -L./libmerc $(LIBMERC_SO) -lcrypto -ldl -lz -o libmerc_driver
	@echo "creating copy of libmerc.so for testing purposes"
	cp $(LIBMERC_SO) $(LIBMERC_SO).alt

libmerc_driver_coverage: debug-libmerc $(UNIT_TESTS) $(LIBMERC_SO) Makefile.in $(UNIT_TESTS_H)
	$(CXX) $(CFLAGS) $(UNIT_TESTS) -pthread -fsanitize=address -lasan -L./libmerc $(LIBMERC_SO) -lcrypto -ldl -lz  --coverage -o libmerc_driver
	@echo "creating copy of libmerc.so for testing purposes"
	cp $(LIBMERC_SO) $(LIBMERC_SO).alt

pdu_verifier: pdu_verifier.cc
	$(CXX) $(CFLAGS) -I ../src/ -I ../src/libmerc pdu_verifier.cc ./../src/pcap_file_io.c -lasan -L./libmerc $(LIBMERC_SO) -lcrypto -ldl -lz -o pdu_verifier

.PHONY: debug-libmerc
debug-libmerc:
	cd ../src && $(MAKE) debug-libmerc

.PHONY: clean
clean:
	rm -rf libmerc_driver
	rm -rf verifier
	rm -rf *.json.gz
	find -type f -name "*.gcno" -delete
	find -type f -name "*.gcda" -delete
	find -type f -name "*.gcov" -delete
	cd ../src; $(MAKE) clean

# EOF
